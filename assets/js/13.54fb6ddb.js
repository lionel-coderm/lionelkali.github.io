(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{184:function(a,t,e){"use strict";e.r(t);var s=e(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"第七部分-springbootcli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第七部分-springbootcli","aria-hidden":"true"}},[a._v("#")]),a._v(" 第七部分.SpringBootCLI")]),a._v(" "),e("p",[a._v("Spring Boot CLI是一个命令行工具，如果您想快速开发Spring应用程序，可以使用它。它允许您运行Groovy脚本，这意味着您拥有一个熟悉的类似java的语法，而没有那么多样板代码。您还可以引导一个新项目，或者为它编写自己的命令。")]),a._v(" "),e("h2",{attrs:{id:"_66-安装cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_66-安装cli","aria-hidden":"true"}},[a._v("#")]),a._v(" 66. 安装CLI")]),a._v(" "),e("p",[a._v("Spring Boot CLI(命令行界面)可以通过使用SDKMAN手动安装!(SDK管理器)，如果您是OSX用户，也可以使用自制软件或MacPorts。有关全面的安装说明，请参阅“开始”一节中“安装Spring Boot CLI”一节10.2。")]),a._v(" "),e("h2",{attrs:{id:"_67-使用cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-使用cli","aria-hidden":"true"}},[a._v("#")]),a._v(" 67. 使用CLI")]),a._v(" "),e("p",[a._v("一旦安装了CLI，就可以通过在命令行输入spring并按Enter来运行它。如果运行spring时没有任何参数，则会显示一个简单的帮助屏幕，如下所示:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring\nusage: spring [--help] [--version]\n       <command> [<args>]\n\nAvailable commands are:\n\n  run [options] <files> [--] [args]\n    Run a spring groovy script\n\n  ... more command help is shown here\n")])])]),e("p",[a._v("您可以输入spring help来获得更多关于所支持的命令的详细信息，如下面的示例所示:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring help run\nspring run - Run a spring groovy script\n\nusage: spring run [options] <files> [--] [args]\n\nOption                     Description\n------                     -----------\n--autoconfigure [Boolean]  Add autoconfigure compiler\n                             transformations (default: true)\n--classpath, -cp           Additional classpath entries\n-e, --edit                 Open the file with the default system\n                             editor\n--no-guess-dependencies    Do not attempt to guess dependencies\n--no-guess-imports         Do not attempt to guess imports\n-q, --quiet                Quiet logging\n-v, --verbose              Verbose logging of dependency\n                             resolution\n--watch                    Watch the specified file for changes\n")])])]),e("p",[a._v("version命令提供了一个快速的方法来检查您正在使用的是哪个版本的Spring Boot，如下所示:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring version\nSpring CLI v2.1.3.RELEASE\n")])])]),e("h3",{attrs:{id:"_67-1使用cli运行应用程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-1使用cli运行应用程序","aria-hidden":"true"}},[a._v("#")]),a._v(" 67.1使用CLI运行应用程序")]),a._v(" "),e("p",[a._v("您可以使用run命令编译和运行Groovy源代码。 Spring Boot CLI是完全独立的，因此您不需要任何外部Groovy安装。")]),a._v(" "),e("p",[a._v("以下示例显示了使用Groovy编写的“hello world”Web应用程序：")]),a._v(" "),e("p",[e("strong",[a._v("hello.groovy.")])]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@RestController")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("WebApplication")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@RequestMapping")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\t"),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("home")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello World!"')]),a._v("\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("p",[a._v("要编译和运行应用程序，请键入以下命令:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring run hello.groovy\n")])])]),e("p",[a._v("要将命令行参数传递给应用程序，请使用 - 将命令与“spring”命令参数分开，如以下示例所示：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring run hello.groovy -- --server.port=9000\n")])])]),e("p",[a._v("要设置JVM命令行参数，可以使用JAVA_OPTS环境变量，如下例所示:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ JAVA_OPTS=-Xmx1024m spring run hello.groovy\n")])])]),e("blockquote",[e("p",[a._v("在Microsoft Windows上设置JAVA_OPTS时，请确保引用整个指令，例如设置“JAVA_OPTS = -Xms256m -Xmx2048m”。 这样做可确保将值正确传递给流程。")])]),a._v(" "),e("h4",{attrs:{id:"_67-1-1-deduced-“grab”-dependencies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-1-1-deduced-“grab”-dependencies","aria-hidden":"true"}},[a._v("#")]),a._v(" 67.1.1 Deduced “grab” Dependencies")]),a._v(" "),e("p",[a._v("标准Groovy包含一个@Grab注释，它允许您声明对第三方库的依赖性。 这个有用的技术让Groovy以与Maven或Gradle相同的方式下载jar，但不需要你使用构建工具。")]),a._v(" "),e("p",[a._v("Spring Boot进一步扩展了这种技术，并尝试根据您的代码推断出“抓取”哪些库。 例如，由于先前显示的WebApplication代码使用@RestController注释，因此Spring Boot会抓取“Tomcat”和“Spring MVC”。")]),a._v(" "),e("p",[a._v("以下项目用作“抓取提示”：")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("Items")]),a._v(" "),e("th",[a._v("Grabs")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[e("code",[a._v("JdbcTemplate")]),a._v(", "),e("code",[a._v("NamedParameterJdbcTemplate")]),a._v(", "),e("code",[a._v("DataSource")])]),a._v(" "),e("td",[a._v("JDBC Application.")])]),a._v(" "),e("tr",[e("td",[e("code",[a._v("@EnableJms")])]),a._v(" "),e("td",[a._v("JMS Application.")])]),a._v(" "),e("tr",[e("td",[e("code",[a._v("@EnableCaching")])]),a._v(" "),e("td",[a._v("Caching abstraction.")])]),a._v(" "),e("tr",[e("td",[e("code",[a._v("@Test")])]),a._v(" "),e("td",[a._v("JUnit.")])]),a._v(" "),e("tr",[e("td",[e("code",[a._v("@EnableRabbit")])]),a._v(" "),e("td",[a._v("RabbitMQ.")])]),a._v(" "),e("tr",[e("td",[a._v("extends "),e("code",[a._v("Specification")])]),a._v(" "),e("td",[a._v("Spock test.")])]),a._v(" "),e("tr",[e("td",[e("code",[a._v("@EnableBatchProcessing")])]),a._v(" "),e("td",[a._v("Spring Batch.")])]),a._v(" "),e("tr",[e("td",[e("code",[a._v("@MessageEndpoint")]),a._v(" "),e("code",[a._v("@EnableIntegration")])]),a._v(" "),e("td",[a._v("Spring Integration.")])]),a._v(" "),e("tr",[e("td",[e("code",[a._v("@Controller")]),a._v(" "),e("code",[a._v("@RestController")]),a._v(" "),e("code",[a._v("@EnableWebMvc")])]),a._v(" "),e("td",[a._v("Spring MVC + Embedded Tomcat.")])]),a._v(" "),e("tr",[e("td",[e("code",[a._v("@EnableWebSecurity")])]),a._v(" "),e("td",[a._v("Spring Security.")])]),a._v(" "),e("tr",[e("td",[e("code",[a._v("@EnableTransactionManagement")])]),a._v(" "),e("td",[a._v("Spring Transaction Management.")])])])]),a._v(" "),e("blockquote",[e("p",[a._v("请参阅Spring Boot CLI源代码中的CompilerAutoConfiguration的子类，以准确了解自定义的应用方式。")])]),a._v(" "),e("h4",{attrs:{id:"_67-1-2-deduced-“grab”-coordinates"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-1-2-deduced-“grab”-coordinates","aria-hidden":"true"}},[a._v("#")]),a._v(" 67.1.2 Deduced “grab” Coordinates")]),a._v(" "),e("p",[a._v("Spring Boot通过允许您指定没有组或版本的依赖项来扩展Groovy的标准@Grab支持（例如，@ Grant（'freemarker'））。 这样做可以参考Spring Boot的默认依赖关系元数据来推断工件的组和版本。")]),a._v(" "),e("blockquote",[e("p",[a._v("默认元数据与您使用的CLI版本相关联。 只有当您移动到新版本的CLI时，它才会发生变化，让您可以控制依赖项版本何时发生变化。 可以在附录中找到显示默认元数据中包含的依赖关系及其版本的表。")])]),a._v(" "),e("h4",{attrs:{id:"_67-1-3-default-import-statements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-1-3-default-import-statements","aria-hidden":"true"}},[a._v("#")]),a._v(" 67.1.3 Default Import Statements")]),a._v(" "),e("p",[a._v("为了帮助减小Groovy代码的大小，自动包含几个import语句。 请注意前面的示例如何引用@ Component，@ RestController和@RequestMapping，而无需使用完全限定名称或import语句。")]),a._v(" "),e("blockquote",[e("p",[a._v("许多Spring注释无需使用导入语句就可以工作。在添加导入之前，尝试运行您的应用程序，看看有什么失败。")])]),a._v(" "),e("h4",{attrs:{id:"_67-1-4-automatic-main-method"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-1-4-automatic-main-method","aria-hidden":"true"}},[a._v("#")]),a._v(" 67.1.4 Automatic Main Method")]),a._v(" "),e("p",[a._v("与等效的Java应用程序不同，您不需要在Groovy脚本中包含public static void main（String [] args）方法。 将自动创建SpringApplication，并将编译后的代码作为源代码。")]),a._v(" "),e("h4",{attrs:{id:"_67-1-5自定义依赖关系管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-1-5自定义依赖关系管理","aria-hidden":"true"}},[a._v("#")]),a._v(" 67.1.5自定义依赖关系管理")]),a._v(" "),e("p",[a._v("默认情况下，CLI在解析@Grab依赖项时使用spring-boot-dependencies中声明的依赖关系管理。 可以使用@DependencyManagementBom批注配置覆盖缺省依赖关系管理的其他依赖关系管理。 注释的值应指定一个或多个Maven BOM的坐标（groupId：artifactId：version）。")]),a._v(" "),e("p",[a._v("例如，请考虑以下声明：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('@DependencyManagementBom("com.example.custom-bom:1.0.0")\n')])])]),e("p",[a._v("前面的声明在com / example / custom-versions / 1.0.0 /下的Maven存储库中选择了custom-bom-1.0.0.pom。")]),a._v(" "),e("p",[a._v("指定多个BOM时，它们将按您声明的顺序应用，如以下示例所示：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('@DependencyManagementBom(["com.example.custom-bom:1.0.0",\n\t\t"com.example.another-bom:1.0.0"])\n')])])]),e("p",[a._v("前面的示例表明另一个bom中的依赖关系管理会覆盖custom-bom中的依赖关系管理。")]),a._v(" "),e("p",[a._v("您可以在任何可以使用@Grab的地方使用@DependencyManagementBom。 但是，为了确保依赖关系管理的一致排序，您可以在应用程序中最多使用一次@DependencyManagementBom。 Spring IO平台是一个有用的依赖关系管理源（它是Spring Boot的依赖关系管理的超集），您可以在其中包含以下行：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("@DependencyManagementBom('io.spring.platform:platform-bom:1.1.2.RELEASE')\n")])])]),e("h3",{attrs:{id:"_67-2具有多个源文件的应用程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-2具有多个源文件的应用程序","aria-hidden":"true"}},[a._v("#")]),a._v(" 67.2具有多个源文件的应用程序")]),a._v(" "),e("p",[a._v("您可以对接受文件输入的所有命令使用“shell globbing”。这样做可以使用单个目录中的多个文件，如下面的示例所示")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring run *.groovy\n")])])]),e("h3",{attrs:{id:"_67-3包装您的应用程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-3包装您的应用程序","aria-hidden":"true"}},[a._v("#")]),a._v(" 67.3包装您的应用程序")]),a._v(" "),e("p",[a._v("您可以使用jar命令将应用程序打包到一个自包含的可执行jar文件中，如以下示例所示：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring jar my-app.jar *.groovy\n")])])]),e("p",[a._v("生成的jar包含通过编译应用程序和所有应用程序的依赖项生成的类，以便可以使用java -jar运行它。 jar文件还包含应用程序类路径中的条目。 您可以使用--include和--exclude添加和删除jar的显式路径。 两者都以逗号分隔，并且都以“+”和“ - ”的形式接受前缀，以表示它们应该从默认值中删除。 默认包括如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public/**, resources/**, static/**, templates/**, META-INF/**, *\n")])])]),e("p",[a._v("默认排除如下:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(".*, repository/**, build/**, target/**, **/*.jar, **/*.groovy\n")])])]),e("p",[a._v("在命令行中键入spring help jar以获得更多信息。")]),a._v(" "),e("h3",{attrs:{id:"_67-4初始化一个新项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-4初始化一个新项目","aria-hidden":"true"}},[a._v("#")]),a._v(" 67.4初始化一个新项目")]),a._v(" "),e("p",[a._v("init命令允许您使用start.spring.io创建一个新项目。如下例所示:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring init --dependencies=web,data-jpa my-project\nUsing service at https://start.spring.io\nProject extracted to '/Users/developer/example/my-project'\n")])])]),e("p",[a._v("上面的示例使用基于Maven的项目创建一个my-project目录，该项目使用spring-boot-starter-web和spring-boot-starter-data-jpa。 您可以使用--list标志列出服务的功能，如以下示例所示：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring init --list\n=======================================\nCapabilities of https://start.spring.io\n=======================================\n\nAvailable dependencies:\n-----------------------\nactuator - Actuator: Production ready features to help you monitor and manage your application\n...\nweb - Web: Support for full-stack web development, including Tomcat and spring-webmvc\nwebsocket - Websocket: Support for WebSocket development\nws - WS: Support for Spring Web Services\n\nAvailable project types:\n------------------------\ngradle-build -  Gradle Config [format:build, build:gradle]\ngradle-project -  Gradle Project [format:project, build:gradle]\nmaven-build -  Maven POM [format:build, build:maven]\nmaven-project -  Maven Project [format:project, build:maven] (default)\n\n...\n")])])]),e("p",[a._v("init命令支持许多选项。 有关详细信息，请参阅帮助输出。 例如，以下命令创建一个使用Java 8和war包装的Gradle项目：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring init --build=gradle --java-version=1.8 --dependencies=websocket --packaging=war sample-app.zip\nUsing service at https://start.spring.io\nContent saved to 'sample-app.zip'\n")])])]),e("h3",{attrs:{id:"_67-5使用嵌入式shell"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-5使用嵌入式shell","aria-hidden":"true"}},[a._v("#")]),a._v(" 67.5使用嵌入式Shell")]),a._v(" "),e("p",[a._v("Spring Boot包含BASH和zsh shell的命令行完成脚本。如果您不使用这两种shell(可能您是Windows用户)，您可以使用shell命令启动一个集成的shell，如下面的示例所示:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring shell\nSpring Boot (v2.1.3.RELEASE)\nHit TAB to complete. Type \\'help' and hit RETURN for help, and \\'exit' to quit.\n")])])]),e("p",[a._v("在嵌入式shell中，您可以直接运行其他命令:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ version\nSpring CLI v2.1.3.RELEASE\n")])])]),e("p",[a._v("嵌入式shell支持ANSI颜色输出以及选项卡完成。 如果需要运行本机命令，可以使用！ 字首。 要退出嵌入式shell，请按ctrl-c。")]),a._v(" "),e("h3",{attrs:{id:"_67-6向cli添加扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-6向cli添加扩展","aria-hidden":"true"}},[a._v("#")]),a._v(" 67.6向CLI添加扩展")]),a._v(" "),e("p",[a._v("您可以使用install命令向CLI添加扩展。 该命令采用格式组中的一组或多组工件坐标：artifact：version，如以下示例所示：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring install com.example:spring-boot-cli-extension:1.0.0.RELEASE\n")])])]),e("p",[a._v("除了安装由您提供的坐标标识的工件外，还会安装所有工件的依赖项。")]),a._v(" "),e("p",[a._v("要卸载依赖项，请使用uninstall命令。 与install命令一样，它采用group：artifact：version格式的一组或多组工件坐标，如以下示例所示：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring uninstall com.example:spring-boot-cli-extension:1.0.0.RELEASE\n")])])]),e("p",[a._v("它会卸载由您提供的坐标及其依赖项标识的工件。")]),a._v(" "),e("p",[a._v("要卸载所有其他依赖项，可以使用--all选项，如以下示例所示：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ spring uninstall --all\n")])])]),e("h2",{attrs:{id:"_68-使用groovy-bean-dsl开发应用程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_68-使用groovy-bean-dsl开发应用程序","aria-hidden":"true"}},[a._v("#")]),a._v(" 68. 使用Groovy bean DSL开发应用程序")]),a._v(" "),e("p",[a._v("Spring Framework 4.0本身支持bean {}“DSL”（从Grails借用），您可以使用相同的格式在bean的Groovy应用程序脚本中嵌入bean定义。 这有时是包含中间件声明等外部功能的好方法，如以下示例所示：")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Configuration")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Application")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CommandLineRunner")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n\t"),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SharedService")]),a._v(" service\n\n\t"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\tprintln service"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("message\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("company")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SharedService")]),a._v("\n\nbeans "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("service")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SharedService")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\tmessage "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello World"')]),a._v("\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("p",[a._v("您可以将类声明与bean{}混合在同一个文件中，只要它们位于顶层，或者，如果您愿意，您可以将bean DSL放在一个单独的文件中。")]),a._v(" "),e("h2",{attrs:{id:"_69-使用settings-xml配置cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_69-使用settings-xml配置cli","aria-hidden":"true"}},[a._v("#")]),a._v(" 69. 使用settings.xml配置CLI")]),a._v(" "),e("p",[a._v("Spring Boot CLI使用Aether，Maven的依赖性解析引擎来解决依赖关系。 CLI使用〜/ .m2 / settings.xml中的Maven配置来配置Aether。 CLI支持以下配置设置：")]),a._v(" "),e("ul",[e("li",[a._v("Offline")]),a._v(" "),e("li",[a._v("Mirrors")]),a._v(" "),e("li",[a._v("Servers")]),a._v(" "),e("li",[a._v("Proxies")]),a._v(" "),e("li",[a._v("Profiles\n"),e("ul",[e("li",[a._v("Activation")]),a._v(" "),e("li",[a._v("Repositories")])])]),a._v(" "),e("li",[a._v("Active profiles")])]),a._v(" "),e("p",[a._v("有关更多信息，请参见Maven的设置文档。")]),a._v(" "),e("h2",{attrs:{id:"_70-接下来要读什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_70-接下来要读什么","aria-hidden":"true"}},[a._v("#")]),a._v(" 70. 接下来要读什么")]),a._v(" "),e("p",[a._v("GitHub存储库中提供了一些示例groovy脚本，您可以使用它们来尝试Spring Boot CLI。 整个源代码中还有广泛的Javadoc。")]),a._v(" "),e("p",[a._v("如果您发现自己达到了CLI工具的限制，那么您可能希望将应用程序转换为完整的Gradle或Maven构建的“Groovy项目”。 下一节将介绍Spring Boot的“构建工具插件”，您可以将其与Gradle或Maven一起使用。")])])}],!1,null,null,null);t.default=n.exports}}]);